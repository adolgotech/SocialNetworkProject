angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(n){n.$on("login",function(t,o){n.currentUser=o})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(n,t){n.login=function(o,e){t.login(o,e).then(function(t){n.$emit("login",t.data),n.username=null,n.password=null})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(n,t){n.addPost=function(){n.postBody&&t.create({username:"taylorxxx",body:n.postBody}).then(function(t){n.postBody=null})},n.$on("ws:new_post",function(t,o){n.$apply(function(){n.posts.unshift(o)})}),t.fetch().then(function(t){n.posts=t.data})}]),angular.module("app").service("PostsSvc",["$http",function(n){this.fetch=function(){return n.get("/api/posts")},this.create=function(t){return n.post("/api/posts",t)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(n,t){n.register=function(o,e){t.register(o,e).then(function(t){n.$emit("login",t.data),n.username=null,n.password=null})}}]),angular.module("app").config(["$routeProvider",function(n){n.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(n){var t=this;t.getUser=function(){return n.get("/api/users")},t.login=function(o,e){return n.post("/api/sessions",{username:o,password:e}).then(function(o){return t.token=o.data,n.defaults.headers.common["X-Auth"]=o.data,t.getUser()})},t.register=function(o,e){return n.post("/api/users",{username:o,password:e}).then(function(n){if(201==n.status)return t.login(o,e)})}}]),angular.module("app").run(["$rootScope","$timeout",function(n,t){!function o(){var e="";e=n.aws?n.aws.ws_url:"ws://localhost:3000";var r=new WebSocket(e);r.onclose=function(n){console.log("WebSocket closed. Reconnecting..."),t(o,1e4)},r.onopen=function(){console.log("WebSocket connected")},r.onmessage=function(t){console.log(t);var o=JSON.parse(t.data);n.$broadcast("ws:"+o.topic,o.data)}}()}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyIsIndlYnNvY2tldHMuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCIkb24iLCJfIiwidXNlciIsImN1cnJlbnRVc2VyIiwiVXNlclN2YyIsImxvZ2luIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInRoZW4iLCJyZXNwb25zZSIsIiRlbWl0IiwiZGF0YSIsIlBvc3RzU3ZjIiwiYWRkUG9zdCIsInBvc3RCb2R5IiwiY3JlYXRlIiwiYm9keSIsInBvc3QiLCIkYXBwbHkiLCJwb3N0cyIsInVuc2hpZnQiLCJmZXRjaCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJyZWdpc3RlciIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwic3ZjIiwiZ2V0VXNlciIsInZhbCIsInRva2VuIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIiwicmVzIiwic3RhdHVzIiwicnVuIiwiJHJvb3RTY29wZSIsIiR0aW1lb3V0IiwiY29ubmVjdCIsInVybCIsImF3cyIsIndzX3VybCIsImNvbm5lY3Rpb24iLCJXZWJTb2NrZXQiLCJvbmNsb3NlIiwiZSIsImNvbnNvbGUiLCJsb2ciLCJvbm9wZW4iLCJvbm1lc3NhZ2UiLCJwYXlsb2FkIiwiSlNPTiIsInBhcnNlIiwiJGJyb2FkY2FzdCIsInRvcGljIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFBQUMsT0FBQSxPQUNBLFlDREFELFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxtQkFBQSxTQUFBLFNBQUFDLEdBQ0FBLEVBQUFDLElBQUEsUUFBQSxTQUFBQyxFQUFBQyxHQUNBSCxFQUFBSSxZQUFBRCxPQ0hBTixRQUFB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ZSgnYXBwJywgW1xuICAnbmdSb3V0ZSdcbl0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICRzY29wZS4kb24oJ2xvZ2luJywgZnVuY3Rpb24oXywgdXNlcikge1xuICAgICRzY29wZS5jdXJyZW50VXNlciA9IHVzZXI7XG4gIH0pXG59KVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignTG9naW5DdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBVc2VyU3ZjKXtcbiAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgVXNlclN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG4gICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgJHNjb3BlLiRlbWl0KCdsb2dpbicsIHJlc3BvbnNlLmRhdGEpO1xuICAgICAgJHNjb3BlLnVzZXJuYW1lID0gbnVsbDtcbiAgICAgICRzY29wZS5wYXNzd29yZCA9IG51bGw7XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcihcIlBvc3RzQ3RybFwiLCBmdW5jdGlvbigkc2NvcGUsIFBvc3RzU3ZjKXtcbiAgICAvLyB0aGlzIGZ1bmN0aW9uIHJ1bnMgd2hlbiB0aGUgXCJBZGQgUG9zdFwiIGJ1dHRvbiBpcyBjbGlja2VkXG4gICAgJHNjb3BlLmFkZFBvc3QgPSBmdW5jdGlvbigpe1xuICAgICAgICAvLyBvbmx5IGFkZCBhIHBvc3QgaWYgdGhlcmUgaXMgYSBib2R5XG4gICAgICAgIGlmKCRzY29wZS5wb3N0Qm9keSl7XG4gICAgICAgICAgICBQb3N0c1N2Yy5jcmVhdGUoe1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiAndGF5bG9yeHh4JyxcbiAgICAgICAgICAgICAgICBib2R5OiAkc2NvcGUucG9zdEJvZHlcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocG9zdCl7XG4gICAgICAgICAgICAgICAgLy8gJHNjb3BlLnBvc3RzLnVuc2hpZnQocG9zdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdEJvZHkgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJHNjb3BlLiRvbignd3M6bmV3X3Bvc3QnLCBmdW5jdGlvbihfLCBwb3N0KSB7XG4gICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KTtcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIFBvc3RzU3ZjLmZldGNoKClcbiAgICAudGhlbihmdW5jdGlvbihwb3N0cyl7XG4gICAgICAgICRzY29wZS5wb3N0cyA9IHBvc3RzLmRhdGE7XG4gICAgfSk7XG59KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ1Bvc3RzU3ZjJywgZnVuY3Rpb24oJGh0dHApe1xuICB0aGlzLmZldGNoID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS9wb3N0c1wiKTtcbiAgfTtcblxuICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uKHBvc3Qpe1xuICAgIHJldHVybiAkaHR0cC5wb3N0KFwiL2FwaS9wb3N0c1wiLCBwb3N0KTtcbiAgfTtcbn0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBVc2VyU3ZjKSB7XG4gICRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgIFVzZXJTdmMucmVnaXN0ZXIodXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICRzY29wZS4kZW1pdCgnbG9naW4nLCByZXNwb25zZS5kYXRhKTtcbiAgICAgICRzY29wZS51c2VybmFtZSA9IG51bGw7XG4gICAgICAkc2NvcGUucGFzc3dvcmQgPSBudWxsO1xuICAgIH0pO1xuICB9XG59KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbmZpZyhmdW5jdGlvbigkcm91dGVQcm92aWRlcil7XG4gICRyb3V0ZVByb3ZpZGVyXG4gIC53aGVuKCcvJywgeyBjb250cm9sbGVyOiAnUG9zdHNDdHJsJywgdGVtcGxhdGVVcmw6ICdwb3N0cy5odG1sJyB9KVxuICAud2hlbignL3JlZ2lzdGVyJywgeyBjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJywgdGVtcGxhdGVVcmw6ICdyZWdpc3Rlci5odG1sJyB9KVxuICAud2hlbignL2xvZ2luJywgeyBjb250cm9sbGVyOiAnTG9naW5DdHJsJywgdGVtcGxhdGVVcmw6ICdsb2dpbi5odG1sJyB9KVxufSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdVc2VyU3ZjJywgZnVuY3Rpb24oJGh0dHApe1xuICB2YXIgc3ZjID0gdGhpcztcbiAgc3ZjLmdldFVzZXIgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKTtcbiAgfVxuXG4gIHN2Yy5sb2dpbiA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCl7XG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvc2Vzc2lvbnMnLCB7XG4gICAgICAndXNlcm5hbWUnOiB1c2VybmFtZSwgJ3Bhc3N3b3JkJzogcGFzc3dvcmRcbiAgICB9KS50aGVuKGZ1bmN0aW9uKHZhbCl7XG4gICAgICBzdmMudG9rZW4gPSB2YWwuZGF0YTtcbiAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IHZhbC5kYXRhO1xuICAgICAgcmV0dXJuIHN2Yy5nZXRVc2VyKCk7XG4gICAgfSk7XG4gIH1cblxuICBzdmMucmVnaXN0ZXIgPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2VycycsIHtcbiAgICAgICd1c2VybmFtZSc6IHVzZXJuYW1lLCAncGFzc3dvcmQnOiBwYXNzd29yZFxuICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzKXtcbiAgICAgIGlmKHJlcy5zdGF0dXMgPT0gMjAxKVxuICAgICAge1xuICAgICAgICByZXR1cm4gc3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4ucnVuKGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkdGltZW91dCkge1xuICAoZnVuY3Rpb24gY29ubmVjdCgpIHtcbiAgICB2YXIgdXJsID0gJyc7XG4gICAgaWYoJHJvb3RTY29wZS5hd3MpIHtcbiAgICAgIHVybCA9ICRyb290U2NvcGUuYXdzLndzX3VybDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB1cmwgPSAnd3M6Ly9sb2NhbGhvc3Q6MzAwMCc7XG4gICAgfVxuICAgIHZhciBjb25uZWN0aW9uID0gbmV3IFdlYlNvY2tldCh1cmwpO1xuICAgIGNvbm5lY3Rpb24ub25jbG9zZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBjb25zb2xlLmxvZygnV2ViU29ja2V0IGNsb3NlZC4gUmVjb25uZWN0aW5nLi4uJyk7XG4gICAgICAkdGltZW91dChjb25uZWN0LCAxMDAwMCk7XG4gICAgfVxuXG4gICAgY29ubmVjdGlvbi5vbm9wZW4gPSBmdW5jdGlvbiAoKXtcbiAgICAgIGNvbnNvbGUubG9nKCdXZWJTb2NrZXQgY29ubmVjdGVkJyk7XG4gICAgfVxuXG4gICAgY29ubmVjdGlvbi5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICB2YXIgcGF5bG9hZCA9IEpTT04ucGFyc2UoZS5kYXRhKTtcbiAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnd3M6JyArIHBheWxvYWQudG9waWMsIHBheWxvYWQuZGF0YSk7XG4gICAgfVxuICB9KSgpXG59KVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
