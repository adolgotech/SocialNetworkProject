angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(n){n.$on("login",function(t,o){n.currentUser=o})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(n,t){n.login=function(o,e){t.login(o,e).then(function(t){n.$emit("login",t.data),n.username=null,n.password=null})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(n,t){n.addPost=function(){n.postBody&&t.create({username:"taylorxxx",body:n.postBody}).then(function(t){n.postBody=null})},n.$on("ws:new_post",function(t,o){n.$apply(function(){n.posts.unshift(o)})}),t.fetch().then(function(t){n.posts=t.data})}]),angular.module("app").service("PostsSvc",["$http",function(n){this.fetch=function(){return n.get("/api/posts")},this.create=function(t){return n.post("/api/posts",t)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(n,t){n.register=function(o,e){t.register(o,e).then(function(t){n.$emit("login",t.data),n.username=null,n.password=null})}}]),angular.module("app").config(["$routeProvider",function(n){n.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(n){var t=this;t.getUser=function(){return n.get("/api/users")},t.login=function(o,e){return n.post("/api/sessions",{username:o,password:e}).then(function(o){return t.token=o.data,n.defaults.headers.common["X-Auth"]=o.data,t.getUser()})},t.register=function(o,e){return n.post("/api/users",{username:o,password:e}).then(function(n){if(201==n.status)return t.login(o,e)})}}]),angular.module("app").run(["$rootScope","$timeout",function(n,t){!function o(){var e="ws://localhost:3000",r=new WebSocket(e);r.onclose=function(n){console.log("WebSocket closed. Reconnecting..."),t(o,1e4)},r.onopen=function(){console.log("WebSocket connected")},r.onmessage=function(t){console.log(t);var o=JSON.parse(t.data);n.$broadcast("ws:"+o.topic,o.data)}}()}]);
//# sourceMappingURL=data:application/json;base64,
